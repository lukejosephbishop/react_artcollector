{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","console","log","Feature","featuredResult","id","title","dated","description","style","culture","technique","medium","people","dimensions","department","division","contact","creditline","images","map","person","indx","displayname","name","key","length","image","src","baseimageurl","alt","Loading","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","results","error","disabled","prev","next","record","index","primaryimageurl","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","classifications","onSubmit","htmlFor","type","placeholder","onChange","target","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"oMAKaA,EAAW,oCACXC,EAAM,8CAKZ,SAAeC,EAAtB,oC,4CAAO,WAAiDC,EAAMC,GAAvD,iBAAAC,EAAA,+EAEoBC,MAAM,GAAD,OAAKN,EAAL,mBAA0BC,EAA1B,YAAmCE,EAAnC,YAA6CI,UAAUH,EAAMI,MAAM,KAAKC,KAAK,QAFtG,cAEGC,EAFH,gBAGgBA,EAASC,OAHzB,cAGGC,EAHH,yBAKIA,GALJ,wG,sBAcA,SAAeC,EAAtB,kC,4CAAO,WAAwCC,GAAxC,iBAAAT,EAAA,+EAEoBC,MAAMQ,GAF1B,cAEGJ,EAFH,gBAGgBA,EAASC,OAHzB,cAGGC,EAHH,yBAKIA,GALJ,wG,sBAgBA,SAAeG,EAAtB,kC,4CAAO,uCAAAV,EAAA,6DACLW,EADK,EACLA,QACAC,EAFK,EAELA,eACAC,EAHK,EAGLA,YAEMJ,EALD,UAKWd,EALX,mBAKgCC,EALhC,2BAKwDgB,EALxD,oBAMHD,EANG,oBAMkBE,GANlB,kBASoBZ,MAAMQ,GAT1B,cASGJ,EATH,gBAUgBA,EAASC,OAVzB,cAUGC,EAVH,yBAYIA,GAZJ,wG,sBAqBA,SAAeO,IAAtB,+B,4CAAO,kCAAAd,EAAA,0DACDe,aAAaC,QAAQ,aADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,eAFpC,cAKCP,EALD,UAKWd,EALX,oBAKiCC,EALjC,kDAQoBK,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGY,EAAUZ,EAAKY,QAErBJ,aAAaK,QAAQ,YAAaH,KAAKI,UAAUF,IAZ9C,kBAcIA,GAdJ,wG,sBAuBA,SAAeG,IAAtB,+B,4CAAO,kCAAAtB,EAAA,0DACDe,aAAaC,QAAQ,mBADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,qBAFpC,cAKCP,EALD,UAKWd,EALX,2BAKwCC,EALxC,yCAQoBK,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGY,EAAUZ,EAAKY,QAErBJ,aAAaK,QAAQ,kBAAmBH,KAAKI,UAAUF,IAZpD,kBAcIA,GAdJ,wG,sBCtDP,IAAMI,EAAa,SAACC,GAAW,IACrBC,EAA4DD,EAA5DC,WAAYC,EAAgDF,EAAhDE,YAAaC,EAAmCH,EAAnCG,aAAcC,EAAqBJ,EAArBI,iBAE/C,OACE,0BAAMC,UAAU,WACd,uBACEC,KAAK,IACLC,QAAO,uCAAE,WAAOC,GAAP,eAAAhC,EAAA,6DACPgC,EAAMC,iBACNN,GAAa,GAFN,SAILO,QAAQC,IAAIV,EAAYC,GAJnB,SAKkB7B,EACrB4B,EACAC,GAPG,OAKCrB,EALD,OASLuB,EAAiBvB,GATZ,kDAWL6B,QAAQC,IAAR,MAXK,yBAaLR,GAAa,GAbR,6EAAF,uDAiBND,KA+LMU,EAnJC,SAACZ,GAAW,IAClBa,EAAmDb,EAAnDa,eAAgBV,EAAmCH,EAAnCG,aAAcC,EAAqBJ,EAArBI,iBAEtC,IAAKS,EACH,OAAO,0BAAMC,GAAG,YAJO,IAQvBC,EAcEF,EAdFE,MACAC,EAaEH,EAbFG,MACAC,EAYEJ,EAZFI,YACAC,EAWEL,EAXFK,MACAC,EAUEN,EAVFM,QACAC,EASEP,EATFO,UACAC,EAQER,EARFQ,OACAC,EAOET,EAPFS,OACAC,EAMEV,EANFU,WACAC,EAKEX,EALFW,WACAC,EAIEZ,EAJFY,SACAC,EAGEb,EAHFa,QACAC,EAEEd,EAFFc,WACAC,EACEf,EADFe,OAGF,OACE,0BAAMd,GAAG,WACP,yBAAKT,UAAU,kBACb,gCACE,4BAAKU,GACL,4BAAKC,IAEP,6BAASX,UAAU,SAChBY,EACC,oCACE,0BAAMZ,UAAU,SAAhB,eACA,0BAAMA,UAAU,WAAWY,IAE3B,KACHC,EACC,oCACE,0BAAMb,UAAU,SAAhB,SACA,0BAAMA,UAAU,WAAWa,IAE3B,KACHC,EACC,oCACE,0BAAMd,UAAU,SAAhB,WACA,kBAAC,EAAD,CACEJ,WAAW,UACXC,YAAaiB,EACbhB,aAAcA,EACdC,iBAAkBA,KAGpB,KACHgB,EACC,oCACE,0BAAMf,UAAU,SAAhB,aACA,kBAAC,EAAD,CACEJ,WAAW,YACXC,YAAakB,EACbjB,aAAcA,EACdC,iBAAkBA,KAGpB,KACHiB,EACC,oCACE,0BAAMhB,UAAU,SAAhB,UACA,kBAAC,EAAD,CACEJ,WAAW,SACXC,YAAamB,EACblB,aAAcA,EACdC,iBAAkBA,KAGpB,KACHkB,EACC,oCACE,0BAAMjB,UAAU,SAAhB,UACCiB,EAAOO,KAAI,SAACC,EAAQC,GACnBrB,QAAQC,IAAImB,EAAOE,aACnB,IAAMC,EAAOH,EAAOE,YACpB,OACE,kBAAC,EAAD,CACEE,IAAG,iBAAYH,GACf9B,WAAW,SACXC,YAAa+B,EACb9B,aAAcA,EACdC,iBAAkBA,QAKxB,KAEHmB,EACC,oCACE,0BAAMlB,UAAU,SAAhB,cACA,0BAAMA,UAAU,WAAWkB,IAE3B,KACHC,EACC,oCACE,0BAAMnB,UAAU,SAAhB,cACA,0BAAMA,UAAU,WAAWmB,IAE3B,KACHC,EACC,oCACE,0BAAMpB,UAAU,SAAhB,YACA,0BAAMA,UAAU,WAAWoB,IAE3B,KACHC,EACC,oCACE,0BAAMrB,UAAU,SAAhB,WACA,0BAAMA,UAAU,WAAWqB,IAE3B,KACHC,EACC,oCACE,0BAAMtB,UAAU,SAAhB,cACA,0BAAMA,UAAU,WAAWsB,IAE3B,MAELC,EAAOO,OACN,oCACE,6BAAS9B,UAAU,UAChBuB,EAAOC,KAAI,SAACO,EAAOL,GAClB,OACE,yBACEG,IAAG,gBAAWH,GACdM,IAAKD,EAAME,aACXC,IAAI,8BAMZ,QCpOG,SAASC,IACtB,OACE,yBAAK1B,GAAG,WACN,wBAAIT,UAAU,WAAd,iBCPN,IAgFeoC,EAhFC,SAACzC,GAAU,IAOjBI,EAAsDJ,EAAtDI,iBAAkBsC,EAAoC1C,EAApC0C,kBAAmBvC,EAAiBH,EAAjBG,aAPpB,EASCH,EAAM2C,cAAxBC,EATiB,EASjBA,KAAMjD,EATW,EASXA,QATW,SAgBVkD,EAhBU,8EAgBzB,WAAyBC,GAAzB,eAAAtE,EAAA,6DACE2B,GAAa,GADf,kBAI0BnB,EAAyB8D,GAJnD,OAIUC,EAJV,OAKI3C,EAAiB2C,GALrB,gDAOIrC,QAAQsC,MAAR,MAPJ,yBASI7C,GAAa,GATjB,6EAhByB,sBA6BzB,OACE,2BAAOW,GAAG,WACR,4BAAQT,UAAU,cAChB,4BACE4C,UAAWL,EAAKM,KAChB7C,UAAU,WACVE,QAAS,WACP,OAAOsC,EAAUD,EAAKM,QAJ1B,YASA,4BACED,UAAWL,EAAKO,KAChB9C,UAAU,OACVE,QAAS,WACP,OAAOsC,EAAUD,EAAKO,QAJ1B,SAUF,6BAAS9C,UAAU,WAChBV,EAAQkC,KAAI,SAACuB,EAAQC,GACpB,OACE,yBACEnB,IAAKmB,EACLhD,UAAU,iBACVE,QAAS,SAACC,GACRA,EAAMC,iBAGNiC,EAAkBU,KAGnBA,EAAOE,gBACN,yBAAKjB,IAAKe,EAAOE,gBAAiBf,IAAKa,EAAOnC,cAC5C,KAGFmC,EAAOrC,MAAQ,4BAAKqC,EAAOrC,OAAc,mDC4D1CwC,EA9HA,SAACvD,GAAU,IAEhBG,EAAmCH,EAAnCG,aAAcC,EAAqBJ,EAArBI,iBAFE,EAGcoD,mBAAS,IAHvB,mBAGjBC,EAHiB,KAGJC,EAHI,OAI4BF,mBAAS,IAJrC,mBAIjBG,EAJiB,KAIGC,EAJH,OAKcJ,mBAAS,IALvB,mBAKjBnE,EALiB,KAKJwE,EALI,OAMML,mBAAS,OANf,mBAMjBrE,EANiB,KAMR2E,EANQ,OAOoBN,mBAAS,OAP7B,mBAOjBpE,EAPiB,KAOD2E,EAPC,KAsCxB,OA7BAC,qBAAU,WACR,IACEC,QAAQC,IAAI,CAAC5E,IAAqBQ,MAA4BqE,MAC5D,YAAmC,IAAD,mBAAhCC,EAAgC,KAArBC,EAAqB,KAChCX,EAAeU,GACfR,EAAsBS,MAG1B,MAAOrB,GACPtC,QAAQC,IAAIqC,MAEb,IAmBD,0BACElC,GAAG,SACHwD,SAAQ,uCAAE,WAAO9D,GAAP,eAAAhC,EAAA,6DACRgC,EAAMC,iBACNN,GAAa,GAFL,kBAKiBjB,EAAkB,CACvCC,UACAC,iBACAC,gBARI,OAKAR,EALA,OAUNuB,EAAiBvB,GAVX,gDAYN6B,QAAQC,IAAR,MAZM,yBAcNR,GAAa,GAdP,4EAAF,uDAkBR,kCACE,2BAAOoE,QAAQ,YAAf,SACA,2BACEzD,GAAG,WACH0D,KAAK,OACLC,YAAY,oBACZlG,MAAOc,EACPqF,SAAU,SAAClE,GACTqD,EAAerD,EAAMmE,OAAOpG,WAIlC,kCACE,2BAAOgG,QAAQ,yBAAf,iBACiB,IACf,0BAAMlE,UAAU,wBAAhB,IACIsD,EAAmBxB,OADvB,MAIF,4BACEF,KAAK,iBACLnB,GAAG,wBACHvC,MAAOa,EACPsF,SAAU,SAAClE,GACTuD,EAAkBvD,EAAMmE,OAAOpG,SAGjC,4BAAQA,MAAM,OAAd,OACCoF,EAAmB9B,KAAI,SAACzC,EAAgB2C,GACvC,OACE,4BACEG,IAAG,UAAK9C,EAAe6C,KAApB,YAA4BF,GAC/BxD,MAAOa,EAAe6C,MAErB7C,EAAe6C,WAM1B,kCACE,2BAAOsC,QAAQ,kBAAf,WACU,0BAAMlE,UAAU,iBAAhB,IAAkCoD,EAAYtB,OAA9C,MAEV,4BACEF,KAAK,UACLnB,GAAG,iBACHvC,MAAOY,EACPuF,SAAU,SAAClE,GACTsD,EAAWtD,EAAMmE,OAAOpG,SAG1B,4BAAQA,MAAM,OAAd,OACCkF,EAAY5B,KAAI,SAAC1C,EAAS4C,GACzB,OACE,4BAAQG,IAAG,UAAK/C,EAAQ8C,KAAb,YAAqBF,GAAQxD,MAAOY,EAAQ8C,MACpD9C,EAAQ8C,WAMnB,4CCpHS,SAAS2C,IACtB,OACE,yBAAK9D,GAAG,SACN,iDACA,oFCRN,IAAM+D,EAAM,WAAM,MAS0BrB,mBAAS,CAAEZ,KAAM,GAAIjD,QAAS,KATxD,mBASTgD,EATS,KASMvC,EATN,OAU4BoD,mBAAS,MAVrC,mBAUT3C,EAVS,KAUO6B,EAVP,OAWkBc,oBAAS,GAX3B,mBAWTsB,EAXS,KAWE3E,EAXF,KAahB,OACE,yBAAKE,UAAU,OACb,kBAACuE,EAAD,MACA,kBAAC,EAAD,CAAQzE,aAAcA,EAAcC,iBAAkBA,IAGtD,kBAAC,EAAD,CACEuC,cAAeA,EACfxC,aAAcA,EACdC,iBAAkBA,EAClBsC,kBAAmBA,IAClB,IAMH,kBAAC,EAAD,CAAS7B,eAAgBA,EAAiBV,aAAcA,EAAcC,iBAAkBA,KACzE,IAAd0E,EAAqB,kBAACtC,EAAD,MAAa,OAazCuC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,S","file":"static/js/main.c3ad7d78.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=97f73656-f3ac-4ebe-8596-6bc23027f702';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from \"react\";\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\n\n/**\n * We need a new component called Searchable which:\n *\n * Has a template like this:\n *\n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n *\n * When someone clicks the anchor tag, you should:\n *\n * - preventDefault on the event\n * - call setIsLoading, set it to true\n *\n * Then start a try/catch/finally block:\n *\n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch:\n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = (props) => {\n  const { searchTerm, searchValue, setIsLoading, setSearchResults } = props;\n\n  return (\n    <span className=\"content\">\n      <a\n        href=\"#\"\n        onClick={async (event) => {\n          event.preventDefault();\n          setIsLoading(true);\n          try {\n            console.log(searchTerm, searchValue);\n            const response = await fetchQueryResultsFromTermAndValue(\n              searchTerm,\n              searchValue\n            );\n            setSearchResults(response);\n          } catch (error) {\n            console.log(error);\n          } finally {\n            setIsLoading(false);\n          }\n        }}\n      >\n        {searchValue}\n      </a>\n    </span>\n  );\n};\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n *\n * <main id=\"feature\"></main>\n *\n * And like this when one is:\n *\n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n *\n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style,\n * technique, medium, dimensions, people, department, division, contact, creditline\n *\n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n *\n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n *\n * This component should be exported as default.\n */\n{\n  /* <Searchable searchTerm=\"culture\" />; */\n}\n\nconst Feature = (props) => {\n  const { featuredResult, setIsLoading, setSearchResults } = props;\n\n  if (!featuredResult) {\n    return <main id=\"feature\"></main>;\n  }\n\n  const {\n    title,\n    dated,\n    description,\n    style,\n    culture,\n    technique,\n    medium,\n    people,\n    dimensions,\n    department,\n    division,\n    contact,\n    creditline,\n    images,\n  } = featuredResult;\n\n  return (\n    <main id=\"feature\">\n      <div className=\"object-feature\">\n        <header>\n          <h3>{title}</h3>\n          <h4>{dated}</h4>\n        </header>\n        <section className=\"facts\">\n          {description ? (\n            <>\n              <span className=\"title\">Description</span>\n              <span className=\"content\">{description}</span>\n            </>\n          ) : null}\n          {style ? (\n            <>\n              <span className=\"title\">Style</span>\n              <span className=\"content\">{style}</span>\n            </>\n          ) : null}\n          {culture ? (\n            <>\n              <span className=\"title\">Culture</span>\n              <Searchable\n                searchTerm=\"culture\"\n                searchValue={culture}\n                setIsLoading={setIsLoading}\n                setSearchResults={setSearchResults}\n              />\n            </>\n          ) : null}\n          {technique ? (\n            <>\n              <span className=\"title\">Technique</span>\n              <Searchable\n                searchTerm=\"technique\"\n                searchValue={technique}\n                setIsLoading={setIsLoading}\n                setSearchResults={setSearchResults}\n              />\n            </>\n          ) : null}\n          {medium ? (\n            <>\n              <span className=\"title\">Medium</span>\n              <Searchable\n                searchTerm=\"medium\"\n                searchValue={medium}\n                setIsLoading={setIsLoading}\n                setSearchResults={setSearchResults}\n              />\n            </>\n          ) : null}\n          {people ? (\n            <>\n              <span className=\"title\">People</span>\n              {people.map((person, indx) => {\n                console.log(person.displayname);\n                const name = person.displayname;\n                return (\n                  <Searchable\n                    key={`people-${indx}`}\n                    searchTerm=\"person\"\n                    searchValue={name}\n                    setIsLoading={setIsLoading}\n                    setSearchResults={setSearchResults}\n                  />\n                );\n              })}\n            </>\n          ) : null}\n\n          {dimensions ? (\n            <>\n              <span className=\"title\">Dimensions</span>\n              <span className=\"content\">{dimensions}</span>\n            </>\n          ) : null}\n          {department ? (\n            <>\n              <span className=\"title\">Department</span>\n              <span className=\"content\">{department}</span>\n            </>\n          ) : null}\n          {division ? (\n            <>\n              <span className=\"title\">Division</span>\n              <span className=\"content\">{division}</span>\n            </>\n          ) : null}\n          {contact ? (\n            <>\n              <span className=\"title\">Contact</span>\n              <span className=\"content\">{contact}</span>\n            </>\n          ) : null}\n          {creditline ? (\n            <>\n              <span className=\"title\">Creditline</span>\n              <span className=\"content\">{creditline}</span>\n            </>\n          ) : null}\n        </section>\n        {images.length ? (\n          <>\n            <section className=\"photos\">\n              {images.map((image, indx) => {\n                return (\n                  <img\n                    key={`image-${indx}`}\n                    src={image.baseimageurl}\n                    alt=\"SOMETHING_WORTHWHILE\"\n                  />\n                );\n              })}\n            </section>\n          </>\n        ) : null}\n      </div>\n    </main>\n  );\n};\n\nexport default Feature;\n","// import React from 'react';\n\n// /**\n//  * Create and export a component called Loading which uses this static HTML template:\n//  *\n//  * <div id=\"loading\">\n//  *   <h2 className=\"message\">Searching...</h2>\n//  * </div>\n//  */\n//  export default Loading;\nimport React from \"react\";\n\nexport default function Loading() {\n  return (\n    <div id=\"loading\">\n      <h2 className=\"message\">Searching...</h2>\n    </div>\n  );\n}\n","import React from \"react\";\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from \"../api\";\n\nconst Preview = (props) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n  const { setSearchResults, setFeaturedResult, setIsLoading } = props;\n\n  const { info, records } = props.searchResults;\n\n  /**\n   * Don't touch this function, it's good to go.\n   *\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <aside id=\"preview\">\n      <header className=\"pagination\">\n        <button\n          disabled={!info.prev}\n          className=\"previous\"\n          onClick={() => {\n            return fetchPage(info.prev);\n          }}\n        >\n          Previous\n        </button>\n        <button\n          disabled={!info.next}\n          className=\"next\"\n          onClick={() => {\n            return fetchPage(info.next);\n          }}\n        >\n          Next\n        </button>\n      </header>\n      <section className=\"results\">\n        {records.map((record, index) => {\n          return (\n            <div\n              key={index}\n              className=\"object-preview\"\n              onClick={(event) => {\n                event.preventDefault();\n                // set the featured result to be this record, using setFeaturedResult\n\n                setFeaturedResult(record);\n              }}\n            >\n              {record.primaryimageurl ? (\n                <img src={record.primaryimageurl} alt={record.description} />\n              ) : null}\n\n              {\n                record.title ? <h3>{record.title}</h3> : <h3>MISSING INFO</h3>\n                // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n              }\n            </div>\n          );\n        })}\n      </section>\n    </aside>\n  );\n};\n\nexport default Preview;\n","import React, { useEffect, useState } from \"react\";\n\n/**\n * Don't touch these imports!\n */\nimport {\n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults,\n} from \"../api\";\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n  const { setIsLoading, setSearchResults } = props;\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState(\"\");\n  const [century, setCentury] = useState(\"any\");\n  const [classification, setClassification] = useState(\"any\");\n\n  useEffect(() => {\n    try {\n      Promise.all([fetchAllCenturies(), fetchAllClassifications()]).then(\n        ([centuries, classifications]) => {\n          setCenturyList(centuries);\n          setClassificationList(classifications);\n        }\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  \n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   *\n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   *\n   * catch: error to console.error\n   *\n   * finally: call setIsLoading, set it to false\n   */\n  return (\n    <form\n      id=\"search\"\n      onSubmit={async (event) => {\n        event.preventDefault();\n        setIsLoading(true);\n\n        try {\n          const response = await fetchQueryResults({\n            century,\n            classification,\n            queryString,\n          });\n          setSearchResults(response);\n        } catch (error) {\n          console.log(error);\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input\n          id=\"keywords\"\n          type=\"text\"\n          placeholder=\"enter keywords...\"\n          value={queryString}\n          onChange={(event) => {\n            setQueryString(event.target.value);\n          }}\n        />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">\n          Classification{\" \"}\n          <span className=\"classification-count\">\n            ({classificationList.length})\n          </span>\n        </label>\n        <select\n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification}\n          onChange={(event) => {\n            setClassification(event.target.value);\n          }}\n        >\n          <option value=\"any\">Any</option>\n          {classificationList.map((classification, indx) => {\n            return (\n              <option\n                key={`${classification.name}-${indx}`}\n                value={classification.name}\n              >\n                {classification.name}\n              </option>\n            );\n          })}\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">\n          Century <span className=\"century-count\">({centuryList.length})</span>\n        </label>\n        <select\n          name=\"century\"\n          id=\"select-century\"\n          value={century}\n          onChange={(event) => {\n            setCentury(event.target.value);\n          }}\n        >\n          <option value=\"any\">Any</option>\n          {centuryList.map((century, indx) => {\n            return (\n              <option key={`${century.name}-${indx}`} value={century.name}>\n                {century.name}\n              </option>\n            );\n          })}\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n  );\n};\n\nexport default Search;\n","\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n *\n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\nimport React from \"react\";\n\nexport default function Title() {\n  return (\n    <div id=\"title\">\n      <h1>The Art Collector</h1>\n      <h5>Search the Harvard Art Museums' Private Collections</h5>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title,\n} from \"./components\";\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   *\n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] });\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <div className=\"app\">\n      <Title />\n      <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n      {/* (trigger <Loading /> on search start/end, and transfer results to preview) */}\n      {/* <Search /> */}\n      <Preview\n        searchResults={searchResults}\n        setIsLoading={setIsLoading}\n        setSearchResults={setSearchResults}\n        setFeaturedResult={setFeaturedResult}\n      />{\" \"}\n      {/* needs props for searchResults, setIsLoading and setSearchResults (clicking\n      prev/next buttons), and setFeaturedResult (clicking a preview) */}\n      {/* <Preview /> */}\n      {/* <Feature /> needs props for featuredResult, as well as setIsLoading and\n      setSearchResults (clicking on searchable properties) */}\n      <Feature featuredResult={featuredResult}  setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n      {isLoading === true ? <Loading />: null}\n      {/* is static, but should only render when isLoading is true */}\n      {/* <Loading /> use a ternary and render null if isLoading is false */}\n     \n    </div>\n  );\n};\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n"],"sourceRoot":""}